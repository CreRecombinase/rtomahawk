// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CheckIntervalContig
bool CheckIntervalContig(const std::string& interval);
RcppExport SEXP _rtomahawk_CheckIntervalContig(SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(CheckIntervalContig(interval));
    return rcpp_result_gen;
END_RCPP
}
// CheckIntervalContigPosition
bool CheckIntervalContigPosition(const std::string& interval);
RcppExport SEXP _rtomahawk_CheckIntervalContigPosition(SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(CheckIntervalContigPosition(interval));
    return rcpp_result_gen;
END_RCPP
}
// CheckIntervalContigRange
bool CheckIntervalContigRange(const std::string& interval);
RcppExport SEXP _rtomahawk_CheckIntervalContigRange(SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(CheckIntervalContigRange(interval));
    return rcpp_result_gen;
END_RCPP
}
// CheckInterval
int CheckInterval(const std::string& interval);
RcppExport SEXP _rtomahawk_CheckInterval(SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(CheckInterval(interval));
    return rcpp_result_gen;
END_RCPP
}
// twk_version
std::string twk_version();
RcppExport SEXP _rtomahawk_twk_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(twk_version());
    return rcpp_result_gen;
END_RCPP
}
// twk_head
Rcpp::DataFrame twk_head(Rcpp::S4& obj, uint32_t n_records);
RcppExport SEXP _rtomahawk_twk_head(SEXP objSEXP, SEXP n_recordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type obj(objSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_records(n_recordsSEXP);
    rcpp_result_gen = Rcpp::wrap(twk_head(obj, n_records));
    return rcpp_result_gen;
END_RCPP
}
// twk_tail
Rcpp::DataFrame twk_tail(Rcpp::S4& obj, uint32_t n_records);
RcppExport SEXP _rtomahawk_twk_tail(SEXP objSEXP, SEXP n_recordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type obj(objSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_records(n_recordsSEXP);
    rcpp_result_gen = Rcpp::wrap(twk_tail(obj, n_records));
    return rcpp_result_gen;
END_RCPP
}
// OpenTomahawkOutput
Rcpp::S4 OpenTomahawkOutput(std::string input);
RcppExport SEXP _rtomahawk_OpenTomahawkOutput(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(OpenTomahawkOutput(input));
    return rcpp_result_gen;
END_RCPP
}
// ReadRecordsIntervals
Rcpp::S4 ReadRecordsIntervals(const Rcpp::S4& twk, const Rcpp::S4& filters, const std::vector<std::string>& intervals, bool really);
RcppExport SEXP _rtomahawk_ReadRecordsIntervals(SEXP twkSEXP, SEXP filtersSEXP, SEXP intervalsSEXP, SEXP reallySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type twk(twkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type filters(filtersSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type intervals(intervalsSEXP);
    Rcpp::traits::input_parameter< bool >::type really(reallySEXP);
    rcpp_result_gen = Rcpp::wrap(ReadRecordsIntervals(twk, filters, intervals, really));
    return rcpp_result_gen;
END_RCPP
}
// ReadRecords
Rcpp::S4 ReadRecords(const Rcpp::S4& twk, const Rcpp::S4& filters, bool really);
RcppExport SEXP _rtomahawk_ReadRecords(SEXP twkSEXP, SEXP filtersSEXP, SEXP reallySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type twk(twkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type filters(filtersSEXP);
    Rcpp::traits::input_parameter< bool >::type really(reallySEXP);
    rcpp_result_gen = Rcpp::wrap(ReadRecords(twk, filters, really));
    return rcpp_result_gen;
END_RCPP
}
// twk_decay
Rcpp::DataFrame twk_decay(Rcpp::S4& obj, uint32_t range, uint32_t n_bins);
RcppExport SEXP _rtomahawk_twk_decay(SEXP objSEXP, SEXP rangeSEXP, SEXP n_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type obj(objSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_bins(n_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(twk_decay(obj, range, n_bins));
    return rcpp_result_gen;
END_RCPP
}
// twk_read_aggregate
Rcpp::S4 twk_read_aggregate(const std::string input);
RcppExport SEXP _rtomahawk_twk_read_aggregate(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(twk_read_aggregate(input));
    return rcpp_result_gen;
END_RCPP
}
// twk_aggregate
Rcpp::S4 twk_aggregate(const Rcpp::S4& twk, std::string agg_name, std::string red_name, int32_t xbins, int32_t ybins, int32_t min_count, int32_t threads, bool verbose, bool progress);
RcppExport SEXP _rtomahawk_twk_aggregate(SEXP twkSEXP, SEXP agg_nameSEXP, SEXP red_nameSEXP, SEXP xbinsSEXP, SEXP ybinsSEXP, SEXP min_countSEXP, SEXP threadsSEXP, SEXP verboseSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type twk(twkSEXP);
    Rcpp::traits::input_parameter< std::string >::type agg_name(agg_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type red_name(red_nameSEXP);
    Rcpp::traits::input_parameter< int32_t >::type xbins(xbinsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type ybins(ybinsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type min_count(min_countSEXP);
    Rcpp::traits::input_parameter< int32_t >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(twk_aggregate(twk, agg_name, red_name, xbins, ybins, min_count, threads, verbose, progress));
    return rcpp_result_gen;
END_RCPP
}
// twk_scalc
Rcpp::S4 twk_scalc(const Rcpp::S4& twk, std::string interval, int32_t window, double minP, double minR2, int32_t threads, bool verbose, bool progress);
RcppExport SEXP _rtomahawk_twk_scalc(SEXP twkSEXP, SEXP intervalSEXP, SEXP windowSEXP, SEXP minPSEXP, SEXP minR2SEXP, SEXP threadsSEXP, SEXP verboseSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type twk(twkSEXP);
    Rcpp::traits::input_parameter< std::string >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< int32_t >::type window(windowSEXP);
    Rcpp::traits::input_parameter< double >::type minP(minPSEXP);
    Rcpp::traits::input_parameter< double >::type minR2(minR2SEXP);
    Rcpp::traits::input_parameter< int32_t >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(twk_scalc(twk, interval, window, minP, minR2, threads, verbose, progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rtomahawk_CheckIntervalContig", (DL_FUNC) &_rtomahawk_CheckIntervalContig, 1},
    {"_rtomahawk_CheckIntervalContigPosition", (DL_FUNC) &_rtomahawk_CheckIntervalContigPosition, 1},
    {"_rtomahawk_CheckIntervalContigRange", (DL_FUNC) &_rtomahawk_CheckIntervalContigRange, 1},
    {"_rtomahawk_CheckInterval", (DL_FUNC) &_rtomahawk_CheckInterval, 1},
    {"_rtomahawk_twk_version", (DL_FUNC) &_rtomahawk_twk_version, 0},
    {"_rtomahawk_twk_head", (DL_FUNC) &_rtomahawk_twk_head, 2},
    {"_rtomahawk_twk_tail", (DL_FUNC) &_rtomahawk_twk_tail, 2},
    {"_rtomahawk_OpenTomahawkOutput", (DL_FUNC) &_rtomahawk_OpenTomahawkOutput, 1},
    {"_rtomahawk_ReadRecordsIntervals", (DL_FUNC) &_rtomahawk_ReadRecordsIntervals, 4},
    {"_rtomahawk_ReadRecords", (DL_FUNC) &_rtomahawk_ReadRecords, 3},
    {"_rtomahawk_twk_decay", (DL_FUNC) &_rtomahawk_twk_decay, 3},
    {"_rtomahawk_twk_read_aggregate", (DL_FUNC) &_rtomahawk_twk_read_aggregate, 1},
    {"_rtomahawk_twk_aggregate", (DL_FUNC) &_rtomahawk_twk_aggregate, 9},
    {"_rtomahawk_twk_scalc", (DL_FUNC) &_rtomahawk_twk_scalc, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_rtomahawk(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
